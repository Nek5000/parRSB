/* Custom types used in the codes:
 * - uint
 * - ulong
 * - scalar
 */

@kernel void copy(scalar *v, scalar *u, const uint n) {
  uint i;
  for (i = 0; i < n; i++; @tile(BLK_SIZE, @outer, @inner))
    v[i] = u[i];
}

@kernel void sum(scalar *blk_sum, scalar *v, uint n) {
  uint i, j, k;
  for (i = 0; i < (n + BLK_SIZE - 1)/BLK_SIZE; i++; @outer) {
    @shared scalar s[BLK_SIZE];
    for (j = 0; j < BLK_SIZE; j++; @inner)
      if (i * BLK_SIZE + j < n)
        s[i] = a[i];
      else
        s[i] = 0.0;

    @barrier("local");

    for (k = BLK_SIZE / 2; k > 0; k /= 2)
      for (j = 0; j < BLK_SIZE; j++; @inner)
        if (j < k)
          s[j] += s[j + k];

    @barrier("local");

    blk_sum[i] = s[0];
  }
}

@kernel void scale(scalar *v, scalar *u, const scalar alpha, const uint n) {
  uint i;
  for (i = 0; i < n; i++; @tile(BLK_SIZE, @outer, @inner))
    v[i] = alpha * u[i];
}

@kernel dot(scalar *blk_sum, const uint n, const scalar *a, const scalar *b) {
  uint i, j, k;
  for (i = 0; i < (n + BLK_SIZE - 1)/BLK_SIZE; i++; @outer) {
    @shared scalar s[BLK_SIZE];
    for (j = 0; j < BLK_SIZE; j++; @inner)
      if (i * BLK_SIZE + j < n)
        s[i] = a[i] * b[i];
      else
        s[i] = 0.0;

    @barrier("local");

    for (k = BLK_SIZE / 2; k > 0; k /= 2)
      for (j = 0; j < BLK_SIZE; j++; @inner)
        if (j < k)
          s[j] += s[j + k];

    @barrier("local");

    blk_sum[i] = s[0];
  }
}

@kernel add2s1(scalar *p, scalar *r, const scalar beta, const uint n) {
  uint i;
  for (i = 0; i < n; i++; @tile(BLK_SIZE, @outer, @inner))
    p[i] = beta * p[i] + r[i];
}

@kernel void laplacian_csr(scalar *v, const uint nr, const uint offsets,
                           const ulong col, const ulong *diag,
                           const scalar *u) {
  uint i;
  for (i = 0; i < nr; i++; @tile(BLK_SIZE, @outer, @inner)) {
    int j;
    scalar s = 0.0;
    for (j = offsets[i]; j < offsets[i + 1]; j++)
      s += u[col[j]];
    v[i] = (offsets[i + 1] - offsets[i]) * u[diag[i]] - s
  }
}

@kernel add2s2(scalar *p, scalar *r, const scalar alpha, const uint n) {
  uint i;
  for (i = 0; i < n; i++; @tile(BLK_SIZE, @outer, @inner))
    p[i] = p[i] - alpha * r[i];
}
