name: parRSB CI Tests
on: [push, pull_request]
env:
  GITHUB.TOKEN: ${{ secrets.token }}
jobs:
  main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [box_2x2x2, pyramid, tgv, e3q, solid, ethier, vortex, expansion]
        np: [1, 2, 3, 4]
      fail-fast: false
    name: "Main: ${{ matrix.test }}, NP = ${{ matrix.np }}"
    env:
      GSVER: 1.0.7
      CC: mpicc
    steps:
      - uses: actions/checkout@v2
      - name: Install apt dependencies
        shell: bash
        run: |
          sudo apt -y update
          sudo apt install -y mpich libmpich-dev python3-pytest
          sudo apt install -y libblas-dev liblapack-dev
          sudo apt install -y octave
      - name: Build parRSB and clone tests
        shell: bash
        run: |
          # Build gslib
          wget --no-check-certificate -O v${GSVER}.tar.gz http://github.com/gslib/gslib/archive/v${GSVER}.tar.gz
          mkdir gslib
          tar -zxvf v${GSVER}.tar.gz -C ./gslib --strip-components=1
          make -C gslib -j4

          # Build parRSB
          export GSLIBPATH=`pwd`/gslib/build/
          make -j1

          # Clone tests
          git clone https://github.com/thilinarmtb/parRSB-tests.git

          # For MPI
          echo "localhost:4" > hostfile
      - name: gencon
        shell: bash
        run: |
          cp hostfile build/examples/gencon parRSB-tests/${{ matrix.test }}

          cd parRSB-tests/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}

          mpirun -np ${{ matrix.np }} --hostfile hostfile ./gencon \
            --mesh ${{ matrix.test }} --tol=${tol} --no-dump --test
      - name: genmap-lanczos
        if: always()
        shell: bash
        run: |
          export PARRSB_RSB_PRE=0
          export PARRSB_RSB_ALGO=0

          cp hostfile build/examples/genmap parRSB-tests/${{ matrix.test }}

          cd parRSB-tests/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}

          mpirun -np ${{ matrix.np }} --hostfile hostfile ./genmap \
            --mesh ${{ matrix.test }} --tol=${tol} --no-dump --test
      - name: genmap-mg-factor-2
        if: always()
        shell: bash
        run: |
          export PARRSB_RSB_PRE=0
          export PARRSB_RSB_ALGO=1

          cp hostfile build/examples/genmap parRSB-tests/${{ matrix.test }}

          cd parRSB-tests/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}

          mpirun -np ${{ matrix.np }} --hostfile hostfile ./genmap \
            --mesh ${{ matrix.test }} --tol=${tol} --no-dump --test
      - name: genmap-mg-factor-4
        if: always()
        shell: bash
        run: |
          export PARRSB_RSB_PRE=0
          export PARRSB_RSB_ALGO=1
          export PARRSB_RSB_MG_FACTOR=4

          cp hostfile build/examples/genmap parRSB-tests/${{ matrix.test }}

          cd parRSB-tests/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}

          mpirun -np ${{ matrix.np }} --hostfile hostfile ./genmap \
            --mesh ${{ matrix.test }} --tol=${tol} --no-dump --test
  ilu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: [box_2x2x2, box_10x1x1, box_3x5x7, pyramid, solid, ethier, vortex, expansion]
        np: [1, 2, 3, 4]
      fail-fast: false
    name: "ILU: ${{ matrix.test }}, NP = ${{ matrix.np }}"
    env:
      GSVER: 1.0.7
      CC: mpicc
    steps:
      - uses: actions/checkout@v2
      - name: Install apt dependencies
        shell: bash
        run: |
          sudo apt -y update
          sudo apt install -y mpich libmpich-dev python3-pytest
          sudo apt install -y libblas-dev liblapack-dev
          sudo apt install -y octave
      - name: Build parRSB and clone tests
        shell: bash
        run: |
          # Build gslib
          wget --no-check-certificate -O v${GSVER}.tar.gz http://github.com/gslib/gslib/archive/v${GSVER}.tar.gz
          mkdir gslib
          tar -zxvf v${GSVER}.tar.gz -C ./gslib --strip-components=1
          make -C gslib -j4

          # Build parRSB
          export GSLIBPATH=`pwd`/gslib/build/
          make -j1

          # Clone tests
          git clone https://github.com/thilinarmtb/parRSB-tests.git

          # For MPI
          echo "localhost:4" > hostfile
      - name: ilu0
        if: always()
        shell: bash
        run: |
          export PARRSB_DUMP_ILU_PRE=1
          export PARRSB_DUMP_ILU_POST=1

          cp hostfile build/examples/ilu .github/workflows/ilu0.m parRSB-tests/${{ matrix.test }}

          cd parRSB-tests/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}

          mpirun -np ${{ matrix.np }} --hostfile hostfile ./ilu \
            --mesh ${{ matrix.test }} --tol=${tol}

          octave-cli ilu0.m
      - name: iluc
        if: always()
        shell: bash
        run: |
          export PARRSB_DUMP_ILUC=1

          cp hostfile build/examples/ilu .github/workflows/iluc.m parRSB-tests/${{ matrix.test }}

          cd parRSB-tests/${{ matrix.test }}

          tol=(`cat test.txt | grep tol`); tol=${tol[2]}

          mpirun -np ${{ matrix.np }} --hostfile hostfile ./ilu \
            --mesh ${{ matrix.test }} --tol=${tol} --type=1

          octave-cli iluc.m
